



Setting up mobile SDK to use Community Users, and Social Login.

1. Create API Enabled Profile or Permission Set
(I prefer the profile as then I know I can use it in my social auth handler in step 2)
a) Create a new profile based on "Community User"
b) Check API Enabled
c) Save

2. Create a 'social integration' user
(this will be the user who creates new users and contacts on social sign-in)
a) Create a user as normal. Give it a name like "Twitter SSO"
b) Give it a Role (I like to create an integration-user role)
c) Save

3. Create a account to assign new users/contacts to
(I like to call it the name of my app, eg: "Dreamhouse App")
a) create account.
b) make owner you social integration user from above
c) save

4. Setup social login.
a) follow the steps here: https://developer.salesforce.com/page/Login_with_Twitter
b) once you get to creating your own handler, paste in the sample handler from the docs above, but then change to use your new profiles and accounts created.
(TODO: clean up provider so it maps fields correctly from twitter)

5. Set up communities in your org, making sure you check the ability to use your Twitter Auth Provider
(https://developer.salesforce.com/docs/atlas.en-us.noversion.mobile_sdk.meta/mobile_sdk/communities_tutorial.htm)
a) create community name something like COMMUNITY-URL/dreamhousecustomers. eg: dreamhousenative-developer-edition.na30.force.com/dreamhousecustomers  (copy this url as you will need it soon)
b) add the profile you created in step 1 to the allowed profiles of the community.
c) customize your community login with a nice icon etc. (you have to check "show all settings" for the branding menu to show up)

At this point you have a community and social sign on set up. Now you have to create the mobile sdk side:

1. Create a connected app
a. just do itlike normal.
b. add the following perms: Access and manage your data (api), Provide access to your data via the Web (web), Full access (full), Perform requests on your behalf at any time (refresh_token, offline_access). Call back can be anything like sfdc://success
c. Save
d. Copy and paste the oauth settings into you mobile app code.

2. Set the oauth url for the mobile sdk to point to your community
a. In your mobile apps Info.plist, add a new string key: SFDCOAuthLoginHost
b. set its  value to the url of your community (without the https://). eg: dreamhousenative-developer-edition.na30.force.com/dreamhousecustomers
c. save
d. delete any existing app you have deployed on the simulator to remove keys stored by the mobile SDK.
e. Click run and you should now be able to use social sign-in to auto create a community user right from a native app.


Custom Object Permissions
1. Update custom object permissions (setup -> Profiles --> the custom profile you created in step 1 above) to any objects you want to access from your mobile app
2. Update field level security on those objects (setup --> security controls -> Field Accessibilty --> View by Profiles.)



SOS set up:

1. install SOS quickstart package into your org: https://salesforcesos.com

First you need to setup Service Cloud using Setting up SOS in Service Cloud

This should provide you with:
OrganizationID: 0000000xxxx
DeployementID :000000xxxx
SOS Access URL: https://x.xx.com/sosagentxxx/



Once that is setup you can follow the instructions for setup of iOS or Android

Use Cocoapods, for downloading and managing Repo.
Pod Instructions:

source 'https://github.com/CocoaPods/Specs.git'
source 'https://github.com/goinstant/pods-specs-public'
pod 'SOS'


